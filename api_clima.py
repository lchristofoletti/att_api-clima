# -*- coding: utf-8 -*-
"""api-clima.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a_pgtnla-E2NyEEMT-dC3RJBAwldWQGp
"""

import requests
import pandas as pd
from google.cloud import bigquery
from google.api_core.exceptions import NotFound
import os

credenciais_path = "credenciais.json"

if not os.path.exists(credenciais_path):
    raise FileNotFoundError(f"Arquivo de credenciais não encontrado: {credenciais_path}")

client = bigquery.Client.from_service_account_json(credenciais_path)

project_id = "portifolio-luiz-christofoletti"
dataset_id = "API_CLIMA"
table_id = "tb_cidades"

cities = [
    "Tokyo", "Delhi", "Shanghai", "São Paulo", "Mexico City",
    "Cairo", "Mumbai", "Beijing", "Dhaka", "Osaka",
    "New York", "Karachi", "Buenos Aires", "Chongqing", "Istanbul",
    "Kolkata", "Lagos", "Kinshasa", "Manila", "Rio de Janeiro"
]

api_key = "80a4c13cb39fcaacf74e25b5e7d4cb0a"

weather_data_list = []

for city_name in cities:
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={api_key}&units=metric"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        weather_data = {
            "city": data["name"],
            "latitude": data["coord"]["lat"],
            "longitude": data["coord"]["lon"],
            "temperature": data["main"]["temp"],
            "feels_like": data["main"]["feels_like"],
            "pressure": data["main"]["pressure"],
            "humidity": data["main"]["humidity"],
            "visibility": data.get("visibility", None),
            "wind_speed": data["wind"].get("speed", None),
            "wind_deg": data["wind"].get("deg", None),
            "cloudiness": data["clouds"].get("all", None),
            "weather_main": data["weather"][0]["main"],
            "weather_description": data["weather"][0]["description"],
            "timestamp": pd.to_datetime(data["dt"], unit='s')
        }
        weather_data_list.append(weather_data)
    else:
        print(f"Erro ao obter dados para {city_name}: {response.status_code}")

if weather_data_list:
    df = pd.DataFrame(weather_data_list)

    dataset_ref = client.dataset(dataset_id)
    try:
        client.get_dataset(dataset_ref)
        print(f"Dataset {dataset_id} já existe.")
    except NotFound:
        print(f"Dataset {dataset_id} não encontrado. Criando...")
        dataset = bigquery.Dataset(dataset_ref)
        dataset.location = "US"
        client.create_dataset(dataset)
        print(f"Dataset {dataset_id} criado com sucesso.")

    table_ref = dataset_ref.table(table_id)
    try:
        client.get_table(table_ref)
        print(f"Tabela {table_id} já existe. Substituindo dados...")
    except NotFound:
        print(f"Tabela {table_id} não encontrada. Criando...")
        schema = [
            bigquery.SchemaField("city", "STRING", mode="REQUIRED"),
            bigquery.SchemaField("latitude", "FLOAT", mode="NULLABLE"),
            bigquery.SchemaField("longitude", "FLOAT", mode="NULLABLE"),
            bigquery.SchemaField("temperature", "FLOAT", mode="REQUIRED"),
            bigquery.SchemaField("feels_like", "FLOAT", mode="NULLABLE"),
            bigquery.SchemaField("pressure", "INTEGER", mode="NULLABLE"),
            bigquery.SchemaField("humidity", "INTEGER", mode="REQUIRED"),
            bigquery.SchemaField("visibility", "INTEGER", mode="NULLABLE"),
            bigquery.SchemaField("wind_speed", "FLOAT", mode="NULLABLE"),
            bigquery.SchemaField("wind_deg", "INTEGER", mode="NULLABLE"),
            bigquery.SchemaField("cloudiness", "INTEGER", mode="NULLABLE"),
            bigquery.SchemaField("weather_main", "STRING", mode="REQUIRED"),
            bigquery.SchemaField("weather_description", "STRING", mode="REQUIRED"),
            bigquery.SchemaField("timestamp", "TIMESTAMP", mode="REQUIRED")
        ]
        table = bigquery.Table(table_ref, schema=schema)
        client.create_table(table)
        print(f"Tabela {table_id} criada com sucesso.")

    job_config = bigquery.LoadJobConfig(write_disposition=bigquery.WriteDisposition.WRITE_TRUNCATE)
    job = client.load_table_from_dataframe(df, table_ref, job_config=job_config)
    job.result()
    print(f"Dados sobrescritos na tabela {table_ref}")
else:
    print("Nenhum dado foi coletado.")
